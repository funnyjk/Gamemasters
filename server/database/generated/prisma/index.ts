// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  game: (where?: GameWhereInput) => Promise<boolean>;
  player: (where?: PlayerWhereInput) => Promise<boolean>;
  score: (where?: ScoreWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
  tournament: (where?: TournamentWhereInput) => Promise<boolean>;
  tournamentPlayer: (where?: TournamentPlayerWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  player: (where: PlayerWhereUniqueInput) => PlayerNullablePromise;
  players: (args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Player>;
  playersConnection: (args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlayerConnectionPromise;
  score: (where: ScoreWhereUniqueInput) => ScoreNullablePromise;
  scores: (args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Score>;
  scoresConnection: (args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScoreConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionNullablePromise;
  sessions: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Session>;
  sessionsConnection: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SessionConnectionPromise;
  tournament: (where: TournamentWhereUniqueInput) => TournamentNullablePromise;
  tournaments: (args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tournament>;
  tournamentsConnection: (args?: {
    where?: TournamentWhereInput;
    orderBy?: TournamentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TournamentConnectionPromise;
  tournamentPlayer: (
    where: TournamentPlayerWhereUniqueInput
  ) => TournamentPlayerNullablePromise;
  tournamentPlayers: (args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TournamentPlayer>;
  tournamentPlayersConnection: (args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TournamentPlayerConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createPlayer: (data: PlayerCreateInput) => PlayerPromise;
  updatePlayer: (args: {
    data: PlayerUpdateInput;
    where: PlayerWhereUniqueInput;
  }) => PlayerPromise;
  updateManyPlayers: (args: {
    data: PlayerUpdateManyMutationInput;
    where?: PlayerWhereInput;
  }) => BatchPayloadPromise;
  upsertPlayer: (args: {
    where: PlayerWhereUniqueInput;
    create: PlayerCreateInput;
    update: PlayerUpdateInput;
  }) => PlayerPromise;
  deletePlayer: (where: PlayerWhereUniqueInput) => PlayerPromise;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayloadPromise;
  createScore: (data: ScoreCreateInput) => ScorePromise;
  updateScore: (args: {
    data: ScoreUpdateInput;
    where: ScoreWhereUniqueInput;
  }) => ScorePromise;
  updateManyScores: (args: {
    data: ScoreUpdateManyMutationInput;
    where?: ScoreWhereInput;
  }) => BatchPayloadPromise;
  upsertScore: (args: {
    where: ScoreWhereUniqueInput;
    create: ScoreCreateInput;
    update: ScoreUpdateInput;
  }) => ScorePromise;
  deleteScore: (where: ScoreWhereUniqueInput) => ScorePromise;
  deleteManyScores: (where?: ScoreWhereInput) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (args: {
    data: SessionUpdateInput;
    where: SessionWhereUniqueInput;
  }) => SessionPromise;
  updateManySessions: (args: {
    data: SessionUpdateManyMutationInput;
    where?: SessionWhereInput;
  }) => BatchPayloadPromise;
  upsertSession: (args: {
    where: SessionWhereUniqueInput;
    create: SessionCreateInput;
    update: SessionUpdateInput;
  }) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;
  createTournament: (data: TournamentCreateInput) => TournamentPromise;
  updateTournament: (args: {
    data: TournamentUpdateInput;
    where: TournamentWhereUniqueInput;
  }) => TournamentPromise;
  updateManyTournaments: (args: {
    data: TournamentUpdateManyMutationInput;
    where?: TournamentWhereInput;
  }) => BatchPayloadPromise;
  upsertTournament: (args: {
    where: TournamentWhereUniqueInput;
    create: TournamentCreateInput;
    update: TournamentUpdateInput;
  }) => TournamentPromise;
  deleteTournament: (where: TournamentWhereUniqueInput) => TournamentPromise;
  deleteManyTournaments: (where?: TournamentWhereInput) => BatchPayloadPromise;
  createTournamentPlayer: (
    data: TournamentPlayerCreateInput
  ) => TournamentPlayerPromise;
  updateTournamentPlayer: (args: {
    data: TournamentPlayerUpdateInput;
    where: TournamentPlayerWhereUniqueInput;
  }) => TournamentPlayerPromise;
  updateManyTournamentPlayers: (args: {
    data: TournamentPlayerUpdateManyMutationInput;
    where?: TournamentPlayerWhereInput;
  }) => BatchPayloadPromise;
  upsertTournamentPlayer: (args: {
    where: TournamentPlayerWhereUniqueInput;
    create: TournamentPlayerCreateInput;
    update: TournamentPlayerUpdateInput;
  }) => TournamentPlayerPromise;
  deleteTournamentPlayer: (
    where: TournamentPlayerWhereUniqueInput
  ) => TournamentPlayerPromise;
  deleteManyTournamentPlayers: (
    where?: TournamentPlayerWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
  score: (
    where?: ScoreSubscriptionWhereInput
  ) => ScoreSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  tournament: (
    where?: TournamentSubscriptionWhereInput
  ) => TournamentSubscriptionPayloadSubscription;
  tournamentPlayer: (
    where?: TournamentPlayerSubscriptionWhereInput
  ) => TournamentPlayerSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pic_ASC"
  | "pic_DESC"
  | "nickname_ASC"
  | "nickname_DESC";

export type TournamentPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "role_ASC"
  | "role_DESC"
  | "nickname_ASC"
  | "nickname_DESC";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type ScoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "score_ASC"
  | "score_DESC"
  | "notes_ASC"
  | "notes_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "bgg_id_ASC"
  | "bgg_id_DESC"
  | "notes_ASC"
  | "notes_DESC";

export type TournamentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "rules_ASC"
  | "rules_DESC"
  | "notes_ASC"
  | "notes_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GameUpdateManyWithoutOwnerInput {
  create?: Maybe<GameCreateWithoutOwnerInput[] | GameCreateWithoutOwnerInput>;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutOwnerInput[]
    | GameUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutOwnerInput[]
    | GameUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SessionUpdateWithoutGameDataInput {
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutSessionsInput>;
  name?: Maybe<String>;
  scores?: Maybe<ScoreUpdateManyWithoutSessionInput>;
}

export interface TournamentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  rules_not?: Maybe<String>;
  rules_in?: Maybe<String[] | String>;
  rules_not_in?: Maybe<String[] | String>;
  rules_lt?: Maybe<String>;
  rules_lte?: Maybe<String>;
  rules_gt?: Maybe<String>;
  rules_gte?: Maybe<String>;
  rules_contains?: Maybe<String>;
  rules_not_contains?: Maybe<String>;
  rules_starts_with?: Maybe<String>;
  rules_not_starts_with?: Maybe<String>;
  rules_ends_with?: Maybe<String>;
  rules_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  sessions_every?: Maybe<SessionWhereInput>;
  sessions_some?: Maybe<SessionWhereInput>;
  sessions_none?: Maybe<SessionWhereInput>;
  players_every?: Maybe<TournamentPlayerWhereInput>;
  players_some?: Maybe<TournamentPlayerWhereInput>;
  players_none?: Maybe<TournamentPlayerWhereInput>;
  AND?: Maybe<TournamentWhereInput[] | TournamentWhereInput>;
  OR?: Maybe<TournamentWhereInput[] | TournamentWhereInput>;
  NOT?: Maybe<TournamentWhereInput[] | TournamentWhereInput>;
}

export interface TournamentUpdateOneRequiredWithoutSessionsInput {
  create?: Maybe<TournamentCreateWithoutSessionsInput>;
  update?: Maybe<TournamentUpdateWithoutSessionsDataInput>;
  upsert?: Maybe<TournamentUpsertWithoutSessionsInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface ScoreWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  player?: Maybe<TournamentPlayerWhereInput>;
  session?: Maybe<SessionWhereInput>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<ScoreWhereInput[] | ScoreWhereInput>;
  OR?: Maybe<ScoreWhereInput[] | ScoreWhereInput>;
  NOT?: Maybe<ScoreWhereInput[] | ScoreWhereInput>;
}

export interface TournamentPlayerCreateOneWithoutScoresInput {
  create?: Maybe<TournamentPlayerCreateWithoutScoresInput>;
  connect?: Maybe<TournamentPlayerWhereUniqueInput>;
}

export interface SessionUpsertWithWhereUniqueWithoutTournamentInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutTournamentDataInput;
  create: SessionCreateWithoutTournamentInput;
}

export interface TournamentPlayerCreateWithoutScoresInput {
  id?: Maybe<ID_Input>;
  player: PlayerCreateOneWithoutTournamentsInput;
  tournament: TournamentCreateOneWithoutPlayersInput;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface TournamentUpdateWithoutSessionsDataInput {
  owner?: Maybe<UserUpdateOneInput>;
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
  players?: Maybe<TournamentPlayerUpdateManyWithoutTournamentInput>;
}

export interface SessionCreateManyWithoutTournamentInput {
  create?: Maybe<
    SessionCreateWithoutTournamentInput[] | SessionCreateWithoutTournamentInput
  >;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface SessionCreateWithoutTournamentInput {
  id?: Maybe<ID_Input>;
  game: GameCreateOneWithoutSessionsInput;
  name: String;
  scores?: Maybe<ScoreCreateManyWithoutSessionInput>;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  sessions_every?: Maybe<SessionWhereInput>;
  sessions_some?: Maybe<SessionWhereInput>;
  sessions_none?: Maybe<SessionWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bgg_id?: Maybe<String>;
  bgg_id_not?: Maybe<String>;
  bgg_id_in?: Maybe<String[] | String>;
  bgg_id_not_in?: Maybe<String[] | String>;
  bgg_id_lt?: Maybe<String>;
  bgg_id_lte?: Maybe<String>;
  bgg_id_gt?: Maybe<String>;
  bgg_id_gte?: Maybe<String>;
  bgg_id_contains?: Maybe<String>;
  bgg_id_not_contains?: Maybe<String>;
  bgg_id_starts_with?: Maybe<String>;
  bgg_id_not_starts_with?: Maybe<String>;
  bgg_id_ends_with?: Maybe<String>;
  bgg_id_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export interface GameUpdateInput {
  owner?: Maybe<UserUpdateOneWithoutGamesInput>;
  sessions?: Maybe<SessionUpdateManyWithoutGameInput>;
  name?: Maybe<String>;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  players_every?: Maybe<PlayerWhereInput>;
  players_some?: Maybe<PlayerWhereInput>;
  players_none?: Maybe<PlayerWhereInput>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateOneWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  update?: Maybe<UserUpdateWithoutGamesDataInput>;
  upsert?: Maybe<UserUpsertWithoutGamesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PlayerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pic?: Maybe<String>;
  pic_not?: Maybe<String>;
  pic_in?: Maybe<String[] | String>;
  pic_not_in?: Maybe<String[] | String>;
  pic_lt?: Maybe<String>;
  pic_lte?: Maybe<String>;
  pic_gt?: Maybe<String>;
  pic_gte?: Maybe<String>;
  pic_contains?: Maybe<String>;
  pic_not_contains?: Maybe<String>;
  pic_starts_with?: Maybe<String>;
  pic_not_starts_with?: Maybe<String>;
  pic_ends_with?: Maybe<String>;
  pic_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  tournaments_every?: Maybe<TournamentPlayerWhereInput>;
  tournaments_some?: Maybe<TournamentPlayerWhereInput>;
  tournaments_none?: Maybe<TournamentPlayerWhereInput>;
  AND?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
  OR?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
  NOT?: Maybe<PlayerWhereInput[] | PlayerWhereInput>;
}

export interface UserUpdateWithoutGamesDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  players?: Maybe<PlayerUpdateManyWithoutOwnerInput>;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlayerWhereInput>;
  AND?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
  OR?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
  NOT?: Maybe<PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput>;
}

export interface PlayerUpdateManyWithoutOwnerInput {
  create?: Maybe<
    PlayerCreateWithoutOwnerInput[] | PlayerCreateWithoutOwnerInput
  >;
  delete?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  connect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  set?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  disconnect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
  update?: Maybe<
    | PlayerUpdateWithWhereUniqueWithoutOwnerInput[]
    | PlayerUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PlayerUpsertWithWhereUniqueWithoutOwnerInput[]
    | PlayerUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  updateMany?: Maybe<
    | PlayerUpdateManyWithWhereNestedInput[]
    | PlayerUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface PlayerUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlayerWhereUniqueInput;
  data: PlayerUpdateWithoutOwnerDataInput;
}

export type PlayerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlayerUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
  tournaments?: Maybe<TournamentPlayerUpdateManyWithoutPlayerInput>;
}

export interface TournamentPlayerUpdateInput {
  player?: Maybe<PlayerUpdateOneRequiredWithoutTournamentsInput>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutPlayersInput>;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
  scores?: Maybe<ScoreUpdateManyWithoutPlayerInput>;
}

export interface TournamentPlayerUpdateManyWithoutPlayerInput {
  create?: Maybe<
    | TournamentPlayerCreateWithoutPlayerInput[]
    | TournamentPlayerCreateWithoutPlayerInput
  >;
  delete?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  connect?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  set?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  disconnect?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  update?: Maybe<
    | TournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput[]
    | TournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput
  >;
  upsert?: Maybe<
    | TournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput[]
    | TournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput
  >;
  deleteMany?: Maybe<
    TournamentPlayerScalarWhereInput[] | TournamentPlayerScalarWhereInput
  >;
  updateMany?: Maybe<
    | TournamentPlayerUpdateManyWithWhereNestedInput[]
    | TournamentPlayerUpdateManyWithWhereNestedInput
  >;
}

export type ScoreWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TournamentPlayerUpdateWithWhereUniqueWithoutPlayerInput {
  where: TournamentPlayerWhereUniqueInput;
  data: TournamentPlayerUpdateWithoutPlayerDataInput;
}

export interface TournamentUpdateInput {
  owner?: Maybe<UserUpdateOneInput>;
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutTournamentInput>;
  players?: Maybe<TournamentPlayerUpdateManyWithoutTournamentInput>;
}

export interface TournamentPlayerUpdateWithoutPlayerDataInput {
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutPlayersInput>;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
  scores?: Maybe<ScoreUpdateManyWithoutPlayerInput>;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TournamentUpdateOneRequiredWithoutPlayersInput {
  create?: Maybe<TournamentCreateWithoutPlayersInput>;
  update?: Maybe<TournamentUpdateWithoutPlayersDataInput>;
  upsert?: Maybe<TournamentUpsertWithoutPlayersInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface SessionUpdateInput {
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutSessionsInput>;
  game?: Maybe<GameUpdateOneRequiredWithoutSessionsInput>;
  name?: Maybe<String>;
  scores?: Maybe<ScoreUpdateManyWithoutSessionInput>;
}

export interface TournamentUpdateWithoutPlayersDataInput {
  owner?: Maybe<UserUpdateOneInput>;
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
  sessions?: Maybe<SessionUpdateManyWithoutTournamentInput>;
}

export type TournamentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ScoreUpdateInput {
  player?: Maybe<TournamentPlayerUpdateOneRequiredWithoutScoresInput>;
  session?: Maybe<SessionUpdateOneRequiredWithoutScoresInput>;
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  players?: Maybe<PlayerUpdateManyWithoutOwnerInput>;
  games?: Maybe<GameUpdateManyWithoutOwnerInput>;
}

export interface PlayerUpdateManyMutationInput {
  name?: Maybe<String>;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface PlayerUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlayerWhereUniqueInput;
  update: PlayerUpdateWithoutOwnerDataInput;
  create: PlayerCreateWithoutOwnerInput;
}

export interface PlayerUpdateInput {
  owner?: Maybe<UserUpdateOneWithoutPlayersInput>;
  name?: Maybe<String>;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
  tournaments?: Maybe<TournamentPlayerUpdateManyWithoutPlayerInput>;
}

export interface GameUpdateWithWhereUniqueWithoutOwnerInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutOwnerDataInput;
}

export interface GameUpdateManyMutationInput {
  name?: Maybe<String>;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface GameUpdateWithoutOwnerDataInput {
  sessions?: Maybe<SessionUpdateManyWithoutGameInput>;
  name?: Maybe<String>;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput;
  create: UserCreateWithoutGamesInput;
}

export interface SessionUpdateManyWithoutGameInput {
  create?: Maybe<
    SessionCreateWithoutGameInput[] | SessionCreateWithoutGameInput
  >;
  delete?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  set?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  disconnect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  update?: Maybe<
    | SessionUpdateWithWhereUniqueWithoutGameInput[]
    | SessionUpdateWithWhereUniqueWithoutGameInput
  >;
  upsert?: Maybe<
    | SessionUpsertWithWhereUniqueWithoutGameInput[]
    | SessionUpsertWithWhereUniqueWithoutGameInput
  >;
  deleteMany?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  updateMany?: Maybe<
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput
  >;
}

export interface PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput;
  data: PlayerUpdateManyDataInput;
}

export interface SessionUpdateWithWhereUniqueWithoutGameInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutGameDataInput;
}

export interface UserCreateOneWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TournamentPlayerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  player?: Maybe<PlayerWhereInput>;
  tournament?: Maybe<TournamentWhereInput>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  scores_every?: Maybe<ScoreWhereInput>;
  scores_some?: Maybe<ScoreWhereInput>;
  scores_none?: Maybe<ScoreWhereInput>;
  AND?: Maybe<TournamentPlayerWhereInput[] | TournamentPlayerWhereInput>;
  OR?: Maybe<TournamentPlayerWhereInput[] | TournamentPlayerWhereInput>;
  NOT?: Maybe<TournamentPlayerWhereInput[] | TournamentPlayerWhereInput>;
}

export interface PlayerCreateManyWithoutOwnerInput {
  create?: Maybe<
    PlayerCreateWithoutOwnerInput[] | PlayerCreateWithoutOwnerInput
  >;
  connect?: Maybe<PlayerWhereUniqueInput[] | PlayerWhereUniqueInput>;
}

export interface TournamentPlayerUpsertWithWhereUniqueWithoutPlayerInput {
  where: TournamentPlayerWhereUniqueInput;
  update: TournamentPlayerUpdateWithoutPlayerDataInput;
  create: TournamentPlayerCreateWithoutPlayerInput;
}

export interface TournamentPlayerCreateManyWithoutPlayerInput {
  create?: Maybe<
    | TournamentPlayerCreateWithoutPlayerInput[]
    | TournamentPlayerCreateWithoutPlayerInput
  >;
  connect?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
}

export interface TournamentUpsertWithoutPlayersInput {
  update: TournamentUpdateWithoutPlayersDataInput;
  create: TournamentCreateWithoutPlayersInput;
}

export interface TournamentCreateOneWithoutPlayersInput {
  create?: Maybe<TournamentCreateWithoutPlayersInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TournamentPlayerUpdateManyWithoutTournamentInput {
  create?: Maybe<
    | TournamentPlayerCreateWithoutTournamentInput[]
    | TournamentPlayerCreateWithoutTournamentInput
  >;
  delete?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  connect?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  set?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  disconnect?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
  update?: Maybe<
    | TournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput[]
    | TournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput
  >;
  upsert?: Maybe<
    | TournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput[]
    | TournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput
  >;
  deleteMany?: Maybe<
    TournamentPlayerScalarWhereInput[] | TournamentPlayerScalarWhereInput
  >;
  updateMany?: Maybe<
    | TournamentPlayerUpdateManyWithWhereNestedInput[]
    | TournamentPlayerUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TournamentPlayerUpdateWithWhereUniqueWithoutTournamentInput {
  where: TournamentPlayerWhereUniqueInput;
  data: TournamentPlayerUpdateWithoutTournamentDataInput;
}

export interface GameCreateManyWithoutOwnerInput {
  create?: Maybe<GameCreateWithoutOwnerInput[] | GameCreateWithoutOwnerInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface TournamentPlayerUpdateWithoutTournamentDataInput {
  player?: Maybe<PlayerUpdateOneRequiredWithoutTournamentsInput>;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
  scores?: Maybe<ScoreUpdateManyWithoutPlayerInput>;
}

export interface SessionCreateManyWithoutGameInput {
  create?: Maybe<
    SessionCreateWithoutGameInput[] | SessionCreateWithoutGameInput
  >;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
}

export interface PlayerUpdateOneRequiredWithoutTournamentsInput {
  create?: Maybe<PlayerCreateWithoutTournamentsInput>;
  update?: Maybe<PlayerUpdateWithoutTournamentsDataInput>;
  upsert?: Maybe<PlayerUpsertWithoutTournamentsInput>;
  connect?: Maybe<PlayerWhereUniqueInput>;
}

export interface TournamentCreateOneWithoutSessionsInput {
  create?: Maybe<TournamentCreateWithoutSessionsInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface PlayerUpdateWithoutTournamentsDataInput {
  owner?: Maybe<UserUpdateOneWithoutPlayersInput>;
  name?: Maybe<String>;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface TournamentPlayerCreateManyWithoutTournamentInput {
  create?: Maybe<
    | TournamentPlayerCreateWithoutTournamentInput[]
    | TournamentPlayerCreateWithoutTournamentInput
  >;
  connect?: Maybe<
    TournamentPlayerWhereUniqueInput[] | TournamentPlayerWhereUniqueInput
  >;
}

export interface UserUpdateOneWithoutPlayersInput {
  create?: Maybe<UserCreateWithoutPlayersInput>;
  update?: Maybe<UserUpdateWithoutPlayersDataInput>;
  upsert?: Maybe<UserUpsertWithoutPlayersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PlayerCreateOneWithoutTournamentsInput {
  create?: Maybe<PlayerCreateWithoutTournamentsInput>;
  connect?: Maybe<PlayerWhereUniqueInput>;
}

export interface UserUpdateWithoutPlayersDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  games?: Maybe<GameUpdateManyWithoutOwnerInput>;
}

export interface UserCreateOneWithoutPlayersInput {
  create?: Maybe<UserCreateWithoutPlayersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutPlayersInput {
  update: UserUpdateWithoutPlayersDataInput;
  create: UserCreateWithoutPlayersInput;
}

export interface ScoreCreateManyWithoutPlayerInput {
  create?: Maybe<
    ScoreCreateWithoutPlayerInput[] | ScoreCreateWithoutPlayerInput
  >;
  connect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
}

export interface PlayerUpsertWithoutTournamentsInput {
  update: PlayerUpdateWithoutTournamentsDataInput;
  create: PlayerCreateWithoutTournamentsInput;
}

export interface SessionCreateOneWithoutScoresInput {
  create?: Maybe<SessionCreateWithoutScoresInput>;
  connect?: Maybe<SessionWhereUniqueInput>;
}

export interface ScoreUpdateManyWithoutPlayerInput {
  create?: Maybe<
    ScoreCreateWithoutPlayerInput[] | ScoreCreateWithoutPlayerInput
  >;
  delete?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  connect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  set?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  disconnect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  update?: Maybe<
    | ScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    | ScoreUpdateWithWhereUniqueWithoutPlayerInput
  >;
  upsert?: Maybe<
    | ScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    | ScoreUpsertWithWhereUniqueWithoutPlayerInput
  >;
  deleteMany?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  updateMany?: Maybe<
    ScoreUpdateManyWithWhereNestedInput[] | ScoreUpdateManyWithWhereNestedInput
  >;
}

export interface GameCreateOneWithoutSessionsInput {
  create?: Maybe<GameCreateWithoutSessionsInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface ScoreUpdateWithWhereUniqueWithoutPlayerInput {
  where: ScoreWhereUniqueInput;
  data: ScoreUpdateWithoutPlayerDataInput;
}

export interface ScoreCreateManyWithoutSessionInput {
  create?: Maybe<
    ScoreCreateWithoutSessionInput[] | ScoreCreateWithoutSessionInput
  >;
  connect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
}

export interface ScoreUpdateWithoutPlayerDataInput {
  session?: Maybe<SessionUpdateOneRequiredWithoutScoresInput>;
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface SessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  tournament?: Maybe<TournamentWhereInput>;
  game?: Maybe<GameWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  scores_every?: Maybe<ScoreWhereInput>;
  scores_some?: Maybe<ScoreWhereInput>;
  scores_none?: Maybe<ScoreWhereInput>;
  AND?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  OR?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  NOT?: Maybe<SessionWhereInput[] | SessionWhereInput>;
}

export interface SessionUpdateOneRequiredWithoutScoresInput {
  create?: Maybe<SessionCreateWithoutScoresInput>;
  update?: Maybe<SessionUpdateWithoutScoresDataInput>;
  upsert?: Maybe<SessionUpsertWithoutScoresInput>;
  connect?: Maybe<SessionWhereUniqueInput>;
}

export interface TournamentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TournamentWhereInput>;
  AND?: Maybe<
    TournamentSubscriptionWhereInput[] | TournamentSubscriptionWhereInput
  >;
  OR?: Maybe<
    TournamentSubscriptionWhereInput[] | TournamentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TournamentSubscriptionWhereInput[] | TournamentSubscriptionWhereInput
  >;
}

export interface SessionUpdateWithoutScoresDataInput {
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutSessionsInput>;
  game?: Maybe<GameUpdateOneRequiredWithoutSessionsInput>;
  name?: Maybe<String>;
}

export interface ScoreSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScoreWhereInput>;
  AND?: Maybe<ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput>;
  OR?: Maybe<ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput>;
  NOT?: Maybe<ScoreSubscriptionWhereInput[] | ScoreSubscriptionWhereInput>;
}

export interface GameUpdateOneRequiredWithoutSessionsInput {
  create?: Maybe<GameCreateWithoutSessionsInput>;
  update?: Maybe<GameUpdateWithoutSessionsDataInput>;
  upsert?: Maybe<GameUpsertWithoutSessionsInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  players?: Maybe<PlayerUpdateManyWithoutOwnerInput>;
  games?: Maybe<GameUpdateManyWithoutOwnerInput>;
}

export interface GameUpdateWithoutSessionsDataInput {
  owner?: Maybe<UserUpdateOneWithoutGamesInput>;
  name?: Maybe<String>;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TournamentPlayerCreateInput {
  id?: Maybe<ID_Input>;
  player: PlayerCreateOneWithoutTournamentsInput;
  tournament: TournamentCreateOneWithoutPlayersInput;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
  scores?: Maybe<ScoreCreateManyWithoutPlayerInput>;
}

export interface GameUpsertWithoutSessionsInput {
  update: GameUpdateWithoutSessionsDataInput;
  create: GameCreateWithoutSessionsInput;
}

export interface TournamentCreateInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneInput>;
  name: String;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
  sessions?: Maybe<SessionCreateManyWithoutTournamentInput>;
  players?: Maybe<TournamentPlayerCreateManyWithoutTournamentInput>;
}

export interface SessionUpsertWithoutScoresInput {
  update: SessionUpdateWithoutScoresDataInput;
  create: SessionCreateWithoutScoresInput;
}

export interface SessionCreateInput {
  id?: Maybe<ID_Input>;
  tournament: TournamentCreateOneWithoutSessionsInput;
  game: GameCreateOneWithoutSessionsInput;
  name: String;
  scores?: Maybe<ScoreCreateManyWithoutSessionInput>;
}

export interface ScoreUpsertWithWhereUniqueWithoutPlayerInput {
  where: ScoreWhereUniqueInput;
  update: ScoreUpdateWithoutPlayerDataInput;
  create: ScoreCreateWithoutPlayerInput;
}

export interface ScoreCreateInput {
  id?: Maybe<ID_Input>;
  player: TournamentPlayerCreateOneWithoutScoresInput;
  session: SessionCreateOneWithoutScoresInput;
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface ScoreScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  OR?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  NOT?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
}

export interface PlayerCreateInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutPlayersInput>;
  name: String;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
  tournaments?: Maybe<TournamentPlayerCreateManyWithoutPlayerInput>;
}

export interface ScoreUpdateManyWithWhereNestedInput {
  where: ScoreScalarWhereInput;
  data: ScoreUpdateManyDataInput;
}

export interface PlayerUpdateManyDataInput {
  name?: Maybe<String>;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface ScoreUpdateManyDataInput {
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutGamesInput>;
  sessions?: Maybe<SessionCreateManyWithoutGameInput>;
  name: String;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TournamentPlayerUpsertWithWhereUniqueWithoutTournamentInput {
  where: TournamentPlayerWhereUniqueInput;
  update: TournamentPlayerUpdateWithoutTournamentDataInput;
  create: TournamentPlayerCreateWithoutTournamentInput;
}

export interface PlayerCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
  tournaments?: Maybe<TournamentPlayerCreateManyWithoutPlayerInput>;
}

export interface TournamentPlayerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    TournamentPlayerScalarWhereInput[] | TournamentPlayerScalarWhereInput
  >;
  OR?: Maybe<
    TournamentPlayerScalarWhereInput[] | TournamentPlayerScalarWhereInput
  >;
  NOT?: Maybe<
    TournamentPlayerScalarWhereInput[] | TournamentPlayerScalarWhereInput
  >;
}

export interface TournamentCreateWithoutPlayersInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneInput>;
  name: String;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
  sessions?: Maybe<SessionCreateManyWithoutTournamentInput>;
}

export interface TournamentPlayerUpdateManyWithWhereNestedInput {
  where: TournamentPlayerScalarWhereInput;
  data: TournamentPlayerUpdateManyDataInput;
}

export interface GameCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  sessions?: Maybe<SessionCreateManyWithoutGameInput>;
  name: String;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TournamentPlayerUpdateManyDataInput {
  role?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface TournamentCreateWithoutSessionsInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneInput>;
  name: String;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
  players?: Maybe<TournamentPlayerCreateManyWithoutTournamentInput>;
}

export interface TournamentUpsertWithoutSessionsInput {
  update: TournamentUpdateWithoutSessionsDataInput;
  create: TournamentCreateWithoutSessionsInput;
}

export interface PlayerCreateWithoutTournamentsInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutPlayersInput>;
  name: String;
  pic?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface ScoreUpdateManyWithoutSessionInput {
  create?: Maybe<
    ScoreCreateWithoutSessionInput[] | ScoreCreateWithoutSessionInput
  >;
  delete?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  connect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  set?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  disconnect?: Maybe<ScoreWhereUniqueInput[] | ScoreWhereUniqueInput>;
  update?: Maybe<
    | ScoreUpdateWithWhereUniqueWithoutSessionInput[]
    | ScoreUpdateWithWhereUniqueWithoutSessionInput
  >;
  upsert?: Maybe<
    | ScoreUpsertWithWhereUniqueWithoutSessionInput[]
    | ScoreUpsertWithWhereUniqueWithoutSessionInput
  >;
  deleteMany?: Maybe<ScoreScalarWhereInput[] | ScoreScalarWhereInput>;
  updateMany?: Maybe<
    ScoreUpdateManyWithWhereNestedInput[] | ScoreUpdateManyWithWhereNestedInput
  >;
}

export interface ScoreCreateWithoutPlayerInput {
  id?: Maybe<ID_Input>;
  session: SessionCreateOneWithoutScoresInput;
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface ScoreUpdateWithWhereUniqueWithoutSessionInput {
  where: ScoreWhereUniqueInput;
  data: ScoreUpdateWithoutSessionDataInput;
}

export interface GameCreateWithoutSessionsInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutGamesInput>;
  name: String;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface ScoreUpdateWithoutSessionDataInput {
  player?: Maybe<TournamentPlayerUpdateOneRequiredWithoutScoresInput>;
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface TournamentPlayerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TournamentPlayerWhereInput>;
  AND?: Maybe<
    | TournamentPlayerSubscriptionWhereInput[]
    | TournamentPlayerSubscriptionWhereInput
  >;
  OR?: Maybe<
    | TournamentPlayerSubscriptionWhereInput[]
    | TournamentPlayerSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | TournamentPlayerSubscriptionWhereInput[]
    | TournamentPlayerSubscriptionWhereInput
  >;
}

export interface TournamentPlayerUpdateOneRequiredWithoutScoresInput {
  create?: Maybe<TournamentPlayerCreateWithoutScoresInput>;
  update?: Maybe<TournamentPlayerUpdateWithoutScoresDataInput>;
  upsert?: Maybe<TournamentPlayerUpsertWithoutScoresInput>;
  connect?: Maybe<TournamentPlayerWhereUniqueInput>;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface TournamentPlayerUpdateWithoutScoresDataInput {
  player?: Maybe<PlayerUpdateOneRequiredWithoutTournamentsInput>;
  tournament?: Maybe<TournamentUpdateOneRequiredWithoutPlayersInput>;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface TournamentUpdateManyMutationInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  rules?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface TournamentPlayerUpsertWithoutScoresInput {
  update: TournamentPlayerUpdateWithoutScoresDataInput;
  create: TournamentPlayerCreateWithoutScoresInput;
}

export interface ScoreUpdateManyMutationInput {
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface ScoreUpsertWithWhereUniqueWithoutSessionInput {
  where: ScoreWhereUniqueInput;
  update: ScoreUpdateWithoutSessionDataInput;
  create: ScoreCreateWithoutSessionInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface SessionUpsertWithWhereUniqueWithoutGameInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutGameDataInput;
  create: SessionCreateWithoutGameInput;
}

export interface UserCreateWithoutGamesInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  players?: Maybe<PlayerCreateManyWithoutOwnerInput>;
}

export interface SessionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  OR?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  NOT?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  players?: Maybe<PlayerCreateManyWithoutOwnerInput>;
  games?: Maybe<GameCreateManyWithoutOwnerInput>;
}

export interface SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput;
  data: SessionUpdateManyDataInput;
}

export interface TournamentPlayerCreateWithoutTournamentInput {
  id?: Maybe<ID_Input>;
  player: PlayerCreateOneWithoutTournamentsInput;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
  scores?: Maybe<ScoreCreateManyWithoutPlayerInput>;
}

export interface SessionUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface SessionCreateWithoutScoresInput {
  id?: Maybe<ID_Input>;
  tournament: TournamentCreateOneWithoutSessionsInput;
  game: GameCreateOneWithoutSessionsInput;
  name: String;
}

export interface GameUpsertWithWhereUniqueWithoutOwnerInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutOwnerDataInput;
  create: GameCreateWithoutOwnerInput;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SessionWhereInput>;
  AND?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  OR?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  NOT?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bgg_id?: Maybe<String>;
  bgg_id_not?: Maybe<String>;
  bgg_id_in?: Maybe<String[] | String>;
  bgg_id_not_in?: Maybe<String[] | String>;
  bgg_id_lt?: Maybe<String>;
  bgg_id_lte?: Maybe<String>;
  bgg_id_gt?: Maybe<String>;
  bgg_id_gte?: Maybe<String>;
  bgg_id_contains?: Maybe<String>;
  bgg_id_not_contains?: Maybe<String>;
  bgg_id_starts_with?: Maybe<String>;
  bgg_id_not_starts_with?: Maybe<String>;
  bgg_id_ends_with?: Maybe<String>;
  bgg_id_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface SessionUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface PlayerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pic?: Maybe<String>;
  pic_not?: Maybe<String>;
  pic_in?: Maybe<String[] | String>;
  pic_not_in?: Maybe<String[] | String>;
  pic_lt?: Maybe<String>;
  pic_lte?: Maybe<String>;
  pic_gt?: Maybe<String>;
  pic_gte?: Maybe<String>;
  pic_contains?: Maybe<String>;
  pic_not_contains?: Maybe<String>;
  pic_starts_with?: Maybe<String>;
  pic_not_starts_with?: Maybe<String>;
  pic_ends_with?: Maybe<String>;
  pic_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  AND?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  OR?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
  NOT?: Maybe<PlayerScalarWhereInput[] | PlayerScalarWhereInput>;
}

export interface GameUpdateManyDataInput {
  name?: Maybe<String>;
  bgg_id?: Maybe<String>;
  notes?: Maybe<String>;
}

export interface SessionCreateWithoutGameInput {
  id?: Maybe<ID_Input>;
  tournament: TournamentCreateOneWithoutSessionsInput;
  name: String;
  scores?: Maybe<ScoreCreateManyWithoutSessionInput>;
}

export interface SessionUpdateWithoutTournamentDataInput {
  game?: Maybe<GameUpdateOneRequiredWithoutSessionsInput>;
  name?: Maybe<String>;
  scores?: Maybe<ScoreUpdateManyWithoutSessionInput>;
}

export interface SessionUpdateWithWhereUniqueWithoutTournamentInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutTournamentDataInput;
}

export interface SessionUpdateManyWithoutTournamentInput {
  create?: Maybe<
    SessionCreateWithoutTournamentInput[] | SessionCreateWithoutTournamentInput
  >;
  delete?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  connect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  set?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  disconnect?: Maybe<SessionWhereUniqueInput[] | SessionWhereUniqueInput>;
  update?: Maybe<
    | SessionUpdateWithWhereUniqueWithoutTournamentInput[]
    | SessionUpdateWithWhereUniqueWithoutTournamentInput
  >;
  upsert?: Maybe<
    | SessionUpsertWithWhereUniqueWithoutTournamentInput[]
    | SessionUpsertWithWhereUniqueWithoutTournamentInput
  >;
  deleteMany?: Maybe<SessionScalarWhereInput[] | SessionScalarWhereInput>;
  updateMany?: Maybe<
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateWithoutPlayersInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  games?: Maybe<GameCreateManyWithoutOwnerInput>;
}

export interface TournamentPlayerCreateWithoutPlayerInput {
  id?: Maybe<ID_Input>;
  tournament: TournamentCreateOneWithoutPlayersInput;
  role?: Maybe<String>;
  nickname?: Maybe<String>;
  scores?: Maybe<ScoreCreateManyWithoutPlayerInput>;
}

export type TournamentPlayerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TournamentPlayerUpdateManyMutationInput {
  role?: Maybe<String>;
  nickname?: Maybe<String>;
}

export interface ScoreCreateWithoutSessionInput {
  id?: Maybe<ID_Input>;
  player: TournamentPlayerCreateOneWithoutScoresInput;
  score?: Maybe<Int>;
  notes?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface PlayerConnection {
  pageInfo: PageInfo;
  edges: PlayerEdge[];
}

export interface PlayerConnectionPromise
  extends Promise<PlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlayerEdge>>() => T;
  aggregate: <T = AggregatePlayerPromise>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface Player {
  id: ID_Output;
  name: String;
  pic?: String;
  nickname?: String;
}

export interface PlayerPromise extends Promise<Player>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  pic: () => Promise<String>;
  nickname: () => Promise<String>;
  tournaments: <T = FragmentableArray<TournamentPlayer>>(args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<Player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  pic: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  tournaments: <
    T = Promise<AsyncIterator<TournamentPlayerSubscription>>
  >(args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlayerNullablePromise
  extends Promise<Player | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  pic: () => Promise<String>;
  nickname: () => Promise<String>;
  tournaments: <T = FragmentableArray<TournamentPlayer>>(args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlayerEdge {
  node: Player;
  cursor: String;
}

export interface PlayerEdgePromise extends Promise<PlayerEdge>, Fragmentable {
  node: <T = PlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdge>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Tournament {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  startDate?: DateTimeOutput;
  endDate?: DateTimeOutput;
  rules?: String;
  notes?: String;
}

export interface TournamentPromise extends Promise<Tournament>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  rules: () => Promise<String>;
  notes: () => Promise<String>;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  players: <T = FragmentableArray<TournamentPlayer>>(args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentSubscription
  extends Promise<AsyncIterator<Tournament>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  rules: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  players: <T = Promise<AsyncIterator<TournamentPlayerSubscription>>>(args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentNullablePromise
  extends Promise<Tournament | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  rules: () => Promise<String>;
  notes: () => Promise<String>;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  players: <T = FragmentableArray<TournamentPlayer>>(args?: {
    where?: TournamentPlayerWhereInput;
    orderBy?: TournamentPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentPlayerPreviousValues {
  id: ID_Output;
  role?: String;
  nickname?: String;
}

export interface TournamentPlayerPreviousValuesPromise
  extends Promise<TournamentPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  role: () => Promise<String>;
  nickname: () => Promise<String>;
}

export interface TournamentPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<TournamentPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTournamentPlayer {
  count: Int;
}

export interface AggregateTournamentPlayerPromise
  extends Promise<AggregateTournamentPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTournamentPlayerSubscription
  extends Promise<AsyncIterator<AggregateTournamentPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TournamentPlayerSubscriptionPayload {
  mutation: MutationType;
  node: TournamentPlayer;
  updatedFields: String[];
  previousValues: TournamentPlayerPreviousValues;
}

export interface TournamentPlayerSubscriptionPayloadPromise
  extends Promise<TournamentPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TournamentPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TournamentPlayerPreviousValuesPromise>() => T;
}

export interface TournamentPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TournamentPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TournamentPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TournamentPlayerPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Game {
  id: ID_Output;
  name: String;
  bgg_id?: String;
  notes?: String;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  bgg_id: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  bgg_id: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  sessions: <T = FragmentableArray<Session>>(args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  bgg_id: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface TournamentPlayerConnection {
  pageInfo: PageInfo;
  edges: TournamentPlayerEdge[];
}

export interface TournamentPlayerConnectionPromise
  extends Promise<TournamentPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TournamentPlayerEdge>>() => T;
  aggregate: <T = AggregateTournamentPlayerPromise>() => T;
}

export interface TournamentPlayerConnectionSubscription
  extends Promise<AsyncIterator<TournamentPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TournamentPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTournamentPlayerSubscription>() => T;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface TournamentEdge {
  node: Tournament;
  cursor: String;
}

export interface TournamentEdgePromise
  extends Promise<TournamentEdge>,
    Fragmentable {
  node: <T = TournamentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TournamentEdgeSubscription
  extends Promise<AsyncIterator<TournamentEdge>>,
    Fragmentable {
  node: <T = TournamentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GamePreviousValues {
  id: ID_Output;
  name: String;
  bgg_id?: String;
  notes?: String;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bgg_id: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bgg_id: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface TournamentPlayer {
  id: ID_Output;
  role?: String;
  nickname?: String;
}

export interface TournamentPlayerPromise
  extends Promise<TournamentPlayer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  player: <T = PlayerPromise>() => T;
  tournament: <T = TournamentPromise>() => T;
  role: () => Promise<String>;
  nickname: () => Promise<String>;
  scores: <T = FragmentableArray<Score>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentPlayerSubscription
  extends Promise<AsyncIterator<TournamentPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  player: <T = PlayerSubscription>() => T;
  tournament: <T = TournamentSubscription>() => T;
  role: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  scores: <T = Promise<AsyncIterator<ScoreSubscription>>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentPlayerNullablePromise
  extends Promise<TournamentPlayer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  player: <T = PlayerPromise>() => T;
  tournament: <T = TournamentPromise>() => T;
  role: () => Promise<String>;
  nickname: () => Promise<String>;
  scores: <T = FragmentableArray<Score>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlayerSubscriptionPayload {
  mutation: MutationType;
  node: Player;
  updatedFields: String[];
  previousValues: PlayerPreviousValues;
}

export interface PlayerSubscriptionPayloadPromise
  extends Promise<PlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValuesPromise>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface AggregateScore {
  count: Int;
}

export interface AggregateScorePromise
  extends Promise<AggregateScore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScoreSubscription
  extends Promise<AsyncIterator<AggregateScore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerPreviousValues {
  id: ID_Output;
  name: String;
  pic?: String;
  nickname?: String;
}

export interface PlayerPreviousValuesPromise
  extends Promise<PlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  pic: () => Promise<String>;
  nickname: () => Promise<String>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  pic: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
}

export interface ScoreConnection {
  pageInfo: PageInfo;
  edges: ScoreEdge[];
}

export interface ScoreConnectionPromise
  extends Promise<ScoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScoreEdge>>() => T;
  aggregate: <T = AggregateScorePromise>() => T;
}

export interface ScoreConnectionSubscription
  extends Promise<AsyncIterator<ScoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScoreSubscription>() => T;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ScoreSubscriptionPayload {
  mutation: MutationType;
  node: Score;
  updatedFields: String[];
  previousValues: ScorePreviousValues;
}

export interface ScoreSubscriptionPayloadPromise
  extends Promise<ScoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScorePreviousValuesPromise>() => T;
}

export interface ScoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScorePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ScorePreviousValues {
  id: ID_Output;
  score?: Int;
  notes?: String;
}

export interface ScorePreviousValuesPromise
  extends Promise<ScorePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  score: () => Promise<Int>;
  notes: () => Promise<String>;
}

export interface ScorePreviousValuesSubscription
  extends Promise<AsyncIterator<ScorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  score: () => Promise<AsyncIterator<Int>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTournament {
  count: Int;
}

export interface AggregateTournamentPromise
  extends Promise<AggregateTournament>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTournamentSubscription
  extends Promise<AsyncIterator<AggregateTournament>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Score {
  id: ID_Output;
  score?: Int;
  notes?: String;
}

export interface ScorePromise extends Promise<Score>, Fragmentable {
  id: () => Promise<ID_Output>;
  player: <T = TournamentPlayerPromise>() => T;
  session: <T = SessionPromise>() => T;
  score: () => Promise<Int>;
  notes: () => Promise<String>;
}

export interface ScoreSubscription
  extends Promise<AsyncIterator<Score>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  player: <T = TournamentPlayerSubscription>() => T;
  session: <T = SessionSubscription>() => T;
  score: () => Promise<AsyncIterator<Int>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface ScoreNullablePromise
  extends Promise<Score | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  player: <T = TournamentPlayerPromise>() => T;
  session: <T = SessionPromise>() => T;
  score: () => Promise<Int>;
  notes: () => Promise<String>;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface ScoreEdge {
  node: Score;
  cursor: String;
}

export interface ScoreEdgePromise extends Promise<ScoreEdge>, Fragmentable {
  node: <T = ScorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScoreEdgeSubscription
  extends Promise<AsyncIterator<ScoreEdge>>,
    Fragmentable {
  node: <T = ScoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  players: <T = FragmentableArray<Player>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  players: <T = Promise<AsyncIterator<PlayerSubscription>>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  players: <T = FragmentableArray<Player>>(args?: {
    where?: PlayerWhereInput;
    orderBy?: PlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TournamentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  startDate?: DateTimeOutput;
  endDate?: DateTimeOutput;
  rules?: String;
  notes?: String;
}

export interface TournamentPreviousValuesPromise
  extends Promise<TournamentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  rules: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface TournamentPreviousValuesSubscription
  extends Promise<AsyncIterator<TournamentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  rules: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

export interface TournamentSubscriptionPayload {
  mutation: MutationType;
  node: Tournament;
  updatedFields: String[];
  previousValues: TournamentPreviousValues;
}

export interface TournamentSubscriptionPayloadPromise
  extends Promise<TournamentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TournamentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TournamentPreviousValuesPromise>() => T;
}

export interface TournamentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TournamentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TournamentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TournamentPreviousValuesSubscription>() => T;
}

export interface Session {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  tournament: <T = TournamentPromise>() => T;
  game: <T = GamePromise>() => T;
  name: () => Promise<String>;
  scores: <T = FragmentableArray<Score>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  tournament: <T = TournamentSubscription>() => T;
  game: <T = GameSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  scores: <T = Promise<AsyncIterator<ScoreSubscription>>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SessionNullablePromise
  extends Promise<Session | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  tournament: <T = TournamentPromise>() => T;
  game: <T = GamePromise>() => T;
  name: () => Promise<String>;
  scores: <T = FragmentableArray<Score>>(args?: {
    where?: ScoreWhereInput;
    orderBy?: ScoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SessionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TournamentPlayerEdge {
  node: TournamentPlayer;
  cursor: String;
}

export interface TournamentPlayerEdgePromise
  extends Promise<TournamentPlayerEdge>,
    Fragmentable {
  node: <T = TournamentPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TournamentPlayerEdgeSubscription
  extends Promise<AsyncIterator<TournamentPlayerEdge>>,
    Fragmentable {
  node: <T = TournamentPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayer {
  count: Int;
}

export interface AggregatePlayerPromise
  extends Promise<AggregatePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface TournamentConnection {
  pageInfo: PageInfo;
  edges: TournamentEdge[];
}

export interface TournamentConnectionPromise
  extends Promise<TournamentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TournamentEdge>>() => T;
  aggregate: <T = AggregateTournamentPromise>() => T;
}

export interface TournamentConnectionSubscription
  extends Promise<AsyncIterator<TournamentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TournamentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTournamentSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Player",
    embedded: false
  },
  {
    name: "Score",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "TournamentPlayer",
    embedded: false
  },
  {
    name: "Tournament",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/database/dev`
});
export const prisma = new Prisma();
